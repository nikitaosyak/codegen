public struct <%- name -%> : <%- entityType -%> {

	public static readonly <%-name-%> LINK = default(<%-name-%>);

	public Category Category { get { return <%- category %>; } }

	private static readonly I<%-childInterface-%>[] CHILDREN = { <%-
		locals.children && children.map(ch=>`${ch}.LINK`).join(', ')
	-%> };
	public I<%-childInterface-%>[] Children { get { return CHILDREN; } }

<% if (locals.restrictions) {-%>
    private static RestrictionSolver solver = new RestrictionSolver(new IRestriction[] {<%-'\n\t\t'-%><%-
        restrictions.join(',\n\t\t')
    -%><%-'\n\t'-%>});
    public bool IsCompatible(IHero hero) { return solver.Solve(hero); }
<% } else { -%>
	public bool IsCompatible(IHero hero) { return true; }
<% } -%>

<% locals.fields&&fields.filter(f => f.assign === 'constant').forEach(f => { -%>
	public <%-f.type-%> <%-f.name-%> { get { return <%-f.value-%>; } }
<% }) -%>
<% locals.fields&&fields.filter(f => f.assign === 'simple').forEach(f => { -%>
	public <%-f.type-%> <%-f.name-%> { get; private set; }
	#if UNITY_EDITOR
	public void Set<%-f.name-%>(<%-f.type-%> v) { <%-f.name-%> = v; }
	#endif
<% }) -%>
<% locals.fields&&fields.filter(f => f.assign === 'constrained').forEach(f => { -%>
	private static <%-f.constrain.type-%> constrain = new <%-f.constrain.type-%>(<%-
		f.constrain.args.join(', ')
		-%>);
	private <%-f.type-%> <%-f.lowerName-%>;
	public <%-f.type-%> <%-f.upperName-%> { 
		get { return <%-f.lowerName-%>; } 
		private set { <%-f.lowerName-%> = constrain.Clamp(value); } 
	}
	#if UNITY_EDITOR
	public void Set<%-f.upperName-%>(<%-f.type-%> v) { <%-f.upperName-%> = v; }
	#endif
<% }) -%>
}
